/*! For license information please see extension.js.LICENSE.txt */
(()=>{"use strict";var e={"./src/proofreader.ts":(e,t,n)=>{n.r(t),n.d(t,{DeepseekClient:()=>c,GoogleClient:()=>l,processJsonFileAsync:()=>p});var o=n("vscode"),r=n("fs"),s=n("axios"),a=n.n(s);n("dotenv").config();class i{constructor(e){this.interval=60/e,this.lastCallTime=0}async wait(){const e=Date.now()/1e3-this.lastCallTime;if(e<this.interval){const t=this.interval-e;await new Promise((e=>setTimeout(e,1e3*t)))}this.lastCallTime=Date.now()/1e3}}class c{constructor(e){const t=o.workspace.getConfiguration("ai-proofread");if("deepseek-chat"===e?(this.apiKey=t.get("apiKeys.deepseekChat",""),this.baseUrl="https://api.deepseek.com/v1"):(this.apiKey=t.get("apiKeys.deepseekV3",""),this.baseUrl="https://dashscope.aliyuncs.com/api/v1"),!this.apiKey)throw new Error(`未配置${"deepseek-chat"===e?"Deepseek Chat":"阿里云 Deepseek V3"} API密钥，请在设置中配置`)}async proofread(e,t=""){const n=[{role:"system",content:'\n<proofreader-system-setting version="0.0.1">\n<role-setting>\n\n你是一位精通中文的校对专家、语言文字专家，像杜永道等专家那样，能准确地发现文章的语言文字问题。\n\n你的语感也非常好，通过朗读就能感受到句子是否自然，是否潜藏问题。\n\n你知识渊博，能发现文中的事实错误。\n\n你工作细致、严谨，当你发现潜在的问题时，你会通过维基百科、《现代汉语词典》《辞海》等各种权威工具书来核对；如果涉及古代汉语和古代文化，你会专门查阅中华书局、上海古籍出版社等权威出版社出版的古籍，以及《王力古汉语字典》《汉语大词典》《辞源》《辞海》等工具书。\n\n你还学习过以下数据纠错数据集：\n\n1. [中文语法纠错数据集](https://huggingface.co/datasets/shibing624/CSC-gpt4)\n2. [校对标准A-Z](http://www.jiaodui.org/bbs/thread.php?fid=692)\n\n你的任务是对用户提供的目标文本（target）进行校对；校对时参考用户提供的参考资料（reference）和上下文（context）。\n\n</role-setting>\n<task>\n\n工作步骤是：\n\n1. 一句一句地仔细阅读甚至朗读每一句话，找出句子中可能存在的问题并改正；可能的问题有：\n    1. 汉字错误，如错误的形近字、同音和音近字，简体字和繁体字混用，异体字，等等；\n    2. 词语错误，如生造的词语、不规范的异形词，等等；\n    3. 句子的语法错误；\n    4. 指代错误；\n    5. 修辞错误；\n    6. 逻辑错误；\n    7. 标点符号错误；\n    8. 数字用法错误；\n    9. 语序错误；\n    10. 引文跟权威版本不一致；\n    11. 等等；\n2. 即使句子没有明显的错误，如果朗读过程中你感觉有下面的问题，也说明句子可能有错误，也要加以改正：\n    1. 句子不自然、不顺当；\n    2. 如果让你表达同一个意思，你通常不会这么说；\n3. 再整体检查如下错误并改正：\n    1. 逻辑错误；\n    2. 章法错误；\n    3. 事实错误；\n    4. 前后文不一致的问题；\n4. 核对参考资料和上下文中的信息，对照上下文中的格式，如果发现有错误或不一致，也要加以改正。\n\n</task>\n<output-format>\n\n输出修改后的目标文本（target），格式要求是：\n\n1. 用户提供的文本的格式可能是markdown、纯文本、TEX、ConTeXt，请保持文本原有的格式和标记；\n2. 原文的空行、换行、分段等格式保持不变；\n3. 不回答原文中的任何提问；\n4. 不给出任何说明或解释；\n\n</output-format>\n</proofreader-system-setting>\n'}];t&&n.push({role:"assistant",content:""},{role:"user",content:t}),n.push({role:"assistant",content:""},{role:"user",content:e});try{let e=(await a().post(`${this.baseUrl}/chat/completions`,{model:this.baseUrl.includes("aliyuncs.com")?"deepseek-v3":"deepseek-chat",messages:n,temperature:1},{headers:{Authorization:`Bearer ${this.apiKey}`,"Content-Type":"application/json"}})).data.choices[0].message.content;return e=e.replace("\n</target>","").replace("<target>\n",""),e}catch(e){return console.error("API调用出错:",e),null}}}class l{constructor(){const e=o.workspace.getConfiguration("ai-proofread");if(this.apiKey=e.get("apiKeys.google",""),!this.apiKey)throw new Error("未配置Google API密钥，请在设置中配置")}async proofread(e,t=""){try{return(await a().post("https://generativelanguage.googleapis.com/v1/models/gemini-pro:generateContent",{contents:[{parts:[{text:e}]}],generationConfig:{temperature:1},safetySettings:[{category:"HARM_CATEGORY_HARASSMENT",threshold:"BLOCK_NONE"},{category:"HARM_CATEGORY_HATE_SPEECH",threshold:"BLOCK_NONE"},{category:"HARM_CATEGORY_SEXUALLY_EXPLICIT",threshold:"BLOCK_NONE"},{category:"HARM_CATEGORY_DANGEROUS_CONTENT",threshold:"BLOCK_NONE"}]},{headers:{"Content-Type":"application/json","x-goog-api-key":this.apiKey}})).data.candidates[0].content.parts[0].text}catch(e){return console.error("API调用出错:",e),null}}}async function p(e,t,n={}){const{startCount:o=1,stopCount:s,model:a="deepseek-chat",rpm:p=15,maxConcurrent:d=3,onProgress:g}=n,u=JSON.parse(r.readFileSync(e,"utf8")),h=u.length;let w=[];if(r.existsSync(t)){if(w=JSON.parse(r.readFileSync(t,"utf8")),w.length!==h)throw new Error(`输出JSON的长度与输入JSON的长度不同: ${w.length} != ${h}`)}else w=new Array(h).fill(null),r.writeFileSync(t,JSON.stringify(w,null,2),"utf8");const f=[];if("number"==typeof o){const e=s?s-1:h-1;for(let t=o-1;t<=e;t++)t<h&&null===w[t]&&f.push(t)}else for(const e of o){const t=e-1;0<=t&&t<h&&null===w[t]&&f.push(t)}const m="google"===a?new l:new c(a),y=new i(p),$=new Array(d).fill(null);await Promise.all(f.map((async e=>{const n=await Promise.race($.map(((e,t)=>Promise.resolve(t))));$[n]=(async e=>{const n=u[e],o=n.target,s=n.reference||"",a=n.context||"",i=a&&a.trim()!==o.trim(),c=`处理 No. ${e+1}/${h}, Len ${o.length}`+(i?` with context ${a.length}`:"")+(s?` with reference ${s.length}`:"")+":"+`\n${o.slice(0,30)} ...\n`+`${"-".repeat(40)}\n`;console.log(c),g&&g(c);let l=s?`<reference>\n${s}\n</reference>`:"";i&&(l+=`\n<context>\n${a}\n</context>`);const p=`<target>\n${o}\n</target>`,d=Date.now();await y.wait();const f=await m.proofread(p,l),$=(Date.now()-d)/1e3;if(f){w[e]=f,r.writeFileSync(t,JSON.stringify(w,null,2),"utf8");const n=`完成 ${e+1}/${h} 长度 ${o.length} 用时 ${$.toFixed(2)}s\n${"-".repeat(40)}\n`;console.log(n),g&&g(n)}else{const t=`段落 ${e+1}/${h}: 处理失败，跳过\n${"-".repeat(40)}\n`;console.log(t),g&&g(t)}})(e).finally((()=>{$[n]=null})),await $[n]})));const x=w.filter((e=>null!==e)).length,v=u.reduce(((e,t)=>e+t.target.length),0),C=w.reduce(((e,t)=>e+(t?t.length:0)),0),S=u.map(((e,t)=>({index:t+1,preview:e.target.trim().split("\n")[0].slice(0,20)}))).filter(((e,t)=>null===w[t])),k=`${t}.md`,I=w.filter((e=>null!==e));return r.writeFileSync(k,I.join("\n\n"),"utf8"),{totalCount:h,processedCount:x,totalLength:v,processedLength:C,unprocessedParagraphs:S}}},"./src/splitter.ts":(e,t,n)=>{function o(e,t=600){t=Math.max(50,t);const n=e.split("\n"),o=[];let r=[],s=0;for(const e of n)r.push(e),s+=e.length,s>=t&&!e.trim()&&(o.push(r.join("\n")),r=[],s=0);return r.length>0&&o.push(r.join("\n")),o}function r(e,t=[2]){const n=e.split("\n"),o=[];let r=[];for(const e of n){let n=!1;for(const o of t)if(e.startsWith("#".repeat(o)+" ")){n=!0;break}n?(r.length>0&&(o.push(r.join("\n")),r=[]),r.push(e)):r.push(e)}return r.length>0&&o.push(r.join("\n")),o}function s(e,t=[2],n=600){const s=r(e,t),a=[];for(const e of s)o(e,n).forEach((t=>{a.push({context:e,target:t})}));return a}function a(e,t=1500,n=800){const r=[];for(const s of e)s.length>t?r.push(...o(s,n)):r.push(s);return r}function i(e,t=100){const n=[];let o=[];for(const r of e)r.length<t?o.push(r):o.length>0?(o.push(r),n.push(o.join("\n")),o=[]):n.push(r);return o.length>0&&n.push(o.join("\n")),n}function c(e,t){let n;if("length"===t.mode)n=o(e,t.cutBy).map((e=>({target:e})));else if("title"===t.mode)n=r(e,t.levels).map((e=>({target:e})));else if("context"===t.mode)n=s(e,t.levels,t.cutBy);else{let o=r(e,t.levels);o=a(o,t.threshold,t.cutBy),o=i(o,t.minLength),n=o.map((e=>({target:e})))}return{jsonOutput:JSON.stringify(n,null,2),markdownOutput:n.map((e=>e.target)).join("\n---\n"),segments:n}}n.r(t),n.d(t,{cutTextByLength:()=>o,cutTextInListByLength:()=>a,mergeShortParagraphs:()=>i,splitMarkdownByTitle:()=>r,splitMarkdownByTitleAndLengthWithContext:()=>s,splitText:()=>c})},axios:e=>{e.exports=require("axios")},dotenv:e=>{e.exports=require("dotenv")},fs:e=>{e.exports=require("fs")},path:e=>{e.exports=require("path")},vscode:e=>{e.exports=require("vscode")}},t={};function n(o){var r=t[o];if(void 0!==r)return r.exports;var s=t[o]={exports:{}};return e[o](s,s.exports,n),s.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var o in t)n.o(t,o)&&!n.o(e,o)&&Object.defineProperty(e,o,{enumerable:!0,get:t[o]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};var o={};(()=>{n.r(o),n.d(o,{activate:()=>i,deactivate:()=>c});var e=n("vscode"),t=n("path"),r=n("fs"),s=n("./src/splitter.ts"),a=n("./src/proofreader.ts");function i(n){async function o(n,o,a){const i=a.getText(),c=e.workspace.getConfiguration("ai-proofread");try{let o={mode:n};if("length"===n){const t=c.get("defaultSplitLength",600),n=await e.window.showInputBox({prompt:"请输入切分长度（字符数）",value:t.toString(),validateInput:e=>{const t=parseInt(e);return isNaN(t)?"请输入有效的数字":t<50?"切分长度不能小于50字符":null}});if(!n)return;o.cutBy=parseInt(n)}else if("title"===n||"title-length"===n||"context"===n){const t=c.get("defaultTitleLevels",[2]),r=await e.window.showInputBox({prompt:"请输入标题级别（用逗号分隔，如：1,2）",value:t.join(","),validateInput:e=>{const t=e.split(",").map((e=>parseInt(e.trim())));return t.some(isNaN)?"请输入有效的数字，用逗号分隔":t.some((e=>e<1||e>6))?"标题级别必须在1到6之间":null}});if(!r)return;if(o.levels=r.split(",").map((e=>parseInt(e.trim()))),"context"===n){const t=c.get("contextSplit.cutBy",600),n=await e.window.showInputBox({prompt:"请输入切分长度（字符数）",value:t.toString(),validateInput:e=>{const t=parseInt(e);return isNaN(t)?"请输入有效的数字":t<50?"切分长度不能小于50字符":null}});if(!n)return;o.cutBy=parseInt(n)}else if("title-length"===n){o.threshold=c.get("titleAndLengthSplit.threshold",1500),o.cutBy=c.get("titleAndLengthSplit.cutBy",800),o.minLength=c.get("titleAndLengthSplit.minLength",120);const t=`将使用以下参数进行标题加长度切分：\n\n- 标题级别: ${o.levels.join(",")}\n- 长度阈值: ${o.threshold} 字符\n- 切分长度: ${o.cutBy} 字符\n- 最小长度: ${o.minLength} 字符\n\n是否继续？`,n=await e.window.showInformationMessage(t,{modal:!0},"继续","修改参数");if(!n)return;if("修改参数"===n){const t=await e.window.showInputBox({prompt:"请输入长度阈值（超过此长度的段落将被切分）",value:o.threshold.toString(),validateInput:e=>{const t=parseInt(e);return isNaN(t)?"请输入有效的数字":null}});if(!t)return;o.threshold=parseInt(t);const n=await e.window.showInputBox({prompt:"请输入切分长度（切分长段落时的目标长度）",value:o.cutBy.toString(),validateInput:e=>{const t=parseInt(e);return isNaN(t)?"请输入有效的数字":null}});if(!n)return;o.cutBy=parseInt(n);const r=await e.window.showInputBox({prompt:"请输入最小长度（小于此长度的段落将被合并）",value:o.minLength.toString(),validateInput:e=>{const t=parseInt(e);return isNaN(t)?"请输入有效的数字":null}});if(!r)return;o.minLength=parseInt(r)}}}const l=t.dirname(a.uri.fsPath),p=t.basename(a.uri.fsPath,t.extname(a.uri.fsPath)),d=t.join(l,`${p}.json`),g=t.join(l,`${p}.json.md`),u=t.join(l,`${p}.log`),{jsonOutput:h,markdownOutput:w,segments:f}=(0,s.splitText)(i,o);r.writeFileSync(d,h,"utf8"),r.writeFileSync(g,w,"utf8");let m="";m="length"===n?`切分长度: ${o.cutBy}\n\n`:"title"===n?`切分标题级别: ${o.levels.join(",")}\n\n`:"context"===n?`切分模式: 带上下文切分\n标题级别: ${o.levels.join(",")}\n切分长度: ${o.cutBy}\n\n`:`切分模式: 标题加长度切分\n标题级别: ${o.levels.join(",")}\n长度阈值: ${o.threshold}\n切分长度: ${o.cutBy}\n最小长度: ${o.minLength}\n\n`,m+=`片段号\t字符数\t上下文长度\t起始文字\n${"-".repeat(50)}\n`;let y=0,$=0;f.forEach(((e,t)=>{const n=e.target.trim().length,o=e.context?e.context.trim().length:0,r=e.target.trim().split("\n")[0].slice(0,15);m+=`No.${t+1}\t${n}\t${o}\t${r}\n`,y+=n,$+=o})),m+="context"===n?`\n合计\t${y}\t${$}\t总计${y+$}`:`\n合计\t${y}`,e.window.showInformationMessage(`文件已成功切分！\nJSON文件：${d}\nMarkdown文件：${g}`);const x=(new Date).toLocaleString();m=`\n[${x}]\n${m}\n${"=".repeat(50)}\n`,r.appendFileSync(u,m,"utf8")}catch(t){e.window.showErrorMessage(`切分文件时出错：${t instanceof Error?t.message:String(t)}`)}}console.log("AI Proofread extension is now active!");let i=[e.commands.registerCommand("ai-proofread.splitFileByLength",(async()=>{const t=e.window.activeTextEditor;t?await o("length",0,t.document):e.window.showInformationMessage("No active editor!")})),e.commands.registerCommand("ai-proofread.splitFileByTitle",(async()=>{const t=e.window.activeTextEditor;t?await o("title",0,t.document):e.window.showInformationMessage("No active editor!")})),e.commands.registerCommand("ai-proofread.splitFileWithContext",(async()=>{const t=e.window.activeTextEditor;t?await o("context",0,t.document):e.window.showInformationMessage("No active editor!")})),e.commands.registerCommand("ai-proofread.splitFileByTitleAndLength",(async()=>{const t=e.window.activeTextEditor;t?await o("title-length",0,t.document):e.window.showInformationMessage("No active editor!")})),e.commands.registerCommand("ai-proofread.proofreadFile",(async()=>{const t=e.window.activeTextEditor;if(!t)return void e.window.showInformationMessage("No active editor!");const n=t.document;if("json"===n.languageId)try{const t=n.getText(),o=JSON.parse(t);if(!Array.isArray(o)||!o.every((e=>"object"==typeof e&&null!==e&&"target"in e)))return void e.window.showErrorMessage("JSON文件格式不正确！需要包含target字段的对象数组。");const s=n.uri.fsPath,i=s.replace(".json",".proofread.json"),c=s.replace(".json",".proofread.log"),l=e.workspace.getConfiguration("ai-proofread"),p=l.get("proofread.model","deepseek-chat"),d=l.get("proofread.rpm",15),g=l.get("proofread.maxConcurrent",3),u=(new Date).toLocaleString();let h=`\n${"=".repeat(50)}\n`;h+=`校对开始时间: ${u}\n`,h+=`使用模型: ${p}\n`,h+=`每分钟请求数: ${d}\n`,h+=`最大并发数: ${g}\n`;const w=o.reduce(((e,t)=>(e.target+=(t.target||"").length,e.context+=(t.context||"").length,e.reference+=(t.reference||"").length,e)),{target:0,context:0,reference:0});h+="\n字符数统计:\n",h+=`- 目标文本: ${w.target} 字符\n`,h+=`- 上下文: ${w.context} 字符\n`,h+=`- 参考文献: ${w.reference} 字符\n`,h+=`- 总计: ${w.target+w.context+w.reference} 字符\n`,h+=`${"=".repeat(50)}\n\n`,r.appendFileSync(c,h,"utf8");let f="";switch(p){case"deepseek-chat":f=l.get("apiKeys.deepseekChat","");break;case"deepseek-v3":f=l.get("apiKeys.deepseekV3","");break;case"google":f=l.get("apiKeys.google","")}if(!f)return void("是"===await e.window.showErrorMessage(`未配置${p}的API密钥，是否现在配置？`,"是","否")&&await e.commands.executeCommand("workbench.action.openSettings","ai-proofread.apiKeys"));await e.window.withProgress({location:e.ProgressLocation.Notification,title:"正在校对文件...",cancellable:!1},(async t=>{try{const n=await(0,a.processJsonFileAsync)(s,i,{model:p,rpm:d,maxConcurrent:g,onProgress:e=>{r.appendFileSync(c,e+"\n","utf8"),t.report({message:e})}}),o=(new Date).toLocaleString();h=`\n${"=".repeat(50)}\n`,h+=`校对结束时间: ${o}\n`,h+=`总段落数: ${n.totalCount}\n`,h+=`已处理段落数、字数: ${n.processedCount}/${n.totalCount} (${(n.processedCount/n.totalCount*100).toFixed(2)}%), `,h+=`${n.processedLength}/${n.totalLength} (${(n.processedLength/n.totalLength*100).toFixed(2)}%)\n`,h+=`未处理段落数: ${n.totalCount-n.processedCount}/${n.totalCount}\n`,n.unprocessedParagraphs.length>0&&(h+="\n未处理的段落:\n",n.unprocessedParagraphs.forEach((e=>{h+=`No.${e.index} \n ${e.preview}...\n\n`}))),h+=`${"=".repeat(50)}\n\n`,r.appendFileSync(c,h,"utf8");const l=`校对完成！\n总段落数: ${n.totalCount}\n已处理段落数: ${n.processedCount} (${(n.processedCount/n.totalCount*100).toFixed(2)}%)\n已处理字数: ${n.processedLength} (${(n.processedLength/n.totalLength*100).toFixed(2)}%)\n未处理段落数: `+(n.totalCount-n.processedCount),u=await e.window.showInformationMessage(l,"查看结果","查看未处理段落");if("查看结果"===u){const t=e.Uri.file(i);await e.workspace.openTextDocument(t),await e.window.showTextDocument(t)}else if("查看未处理段落"===u)if(n.unprocessedParagraphs.length>0){const t=n.unprocessedParagraphs.map((e=>({label:`No.${e.index}`,description:e.preview+"..."})));await e.window.showQuickPick(t,{placeHolder:"未处理的段落"})}else e.window.showInformationMessage("没有未处理的段落！")}catch(t){t instanceof Error&&t.message.includes("未配置")?"是"===await e.window.showErrorMessage(t.message+"，是否现在配置？","是","否")&&await e.commands.executeCommand("workbench.action.openSettings","ai-proofread.apiKeys"):e.window.showErrorMessage(`校对过程中出错：${t instanceof Error?t.message:String(t)}`)}}))}catch(t){e.window.showErrorMessage(`解析JSON文件时出错：${t instanceof Error?t.message:String(t)}`)}else e.window.showErrorMessage("请选择JSON文件进行校对！")})),e.commands.registerCommand("ai-proofread.proofreadSelection",(async()=>{const t=e.window.activeTextEditor;if(!t)return void e.window.showInformationMessage("No active editor!");const n=t.selection,o=t.document.getText(n);if(o)try{const s=e.workspace.getConfiguration("ai-proofread"),i=s.get("proofread.model","deepseek-chat");s.get("proofread.defaultContextLevel",0);let c="";switch(i){case"deepseek-chat":c=s.get("apiKeys.deepseekChat","");break;case"deepseek-v3":c=s.get("apiKeys.deepseekV3","");break;case"google":c=s.get("apiKeys.google","")}if(!c)return void("是"===await e.window.showErrorMessage(`未配置${i}的API密钥，是否现在配置？`,"是","否")&&await e.commands.executeCommand("workbench.action.openSettings","ai-proofread.apiKeys"));const l=await e.window.showQuickPick(["不使用上下文","1 级标题","2 级标题","3 级标题","4 级标题","5 级标题","6 级标题"],{placeHolder:"选择上下文范围（可选）",ignoreFocusOut:!0});let p;"是"===await e.window.showQuickPick(["否","是"],{placeHolder:"是否使用参考文件？",ignoreFocusOut:!0})&&(p=await e.window.showOpenDialog({canSelectFiles:!0,canSelectFolders:!1,canSelectMany:!1,filters:{"Text files":["txt","md"]},title:"选择参考文件"}));let d=o,g="",u="";if(l&&"不使用上下文"!==l){const e=l.charAt(0),o=t.document.getText().split("\n"),r=n.start.line,s=n.end.line;let a=r-1;for(;a>0&&!o[a-1].startsWith(`${"#".repeat(parseInt(e))} `);)a--;let i=s;for(;i<o.length-1&&!o[i+1].startsWith(`${"#".repeat(parseInt(e))} `);)i++;g=o.slice(a,i+1).join("\n")}p&&p[0]&&(u=r.readFileSync(p[0].fsPath,"utf8"));const h=g&&g.trim()!==d.trim(),w=`处理 Len ${d.length}`+(h?` with context ${g.length}`:"")+(u?` with reference ${u.length}`:"");e.window.showInformationMessage(w),u&&(u=`<reference>\n${u}\n</reference>`),g&&(g=`<context>\n${g}\n</context>`),d=`<target>\n${d}\n</target>`,await e.window.withProgress({location:e.ProgressLocation.Notification,title:"正在校对文本...",cancellable:!1},(async n=>{try{const n="google"===i?new a.GoogleClient:new a.DeepseekClient(i),o=await n.proofread(d,u+"\n\n"+g);if(o){const n=await e.workspace.openTextDocument({content:o,language:t.document.languageId});await e.window.showTextDocument(n,e.ViewColumn.Beside)}else e.window.showErrorMessage("校对失败，请重试。")}catch(t){e.window.showErrorMessage(`校对过程中出错：${t instanceof Error?t.message:String(t)}`)}}))}catch(t){e.window.showErrorMessage(`校对过程中出错：${t instanceof Error?t.message:String(t)}`)}else e.window.showInformationMessage("请先选择要校对的文本！")}))];n.subscriptions.push(...i)}function c(){}})(),module.exports=o})();
//# sourceMappingURL=extension.js.map